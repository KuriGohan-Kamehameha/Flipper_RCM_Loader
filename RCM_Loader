#include <stdio.h>

#include <string.h>

#include "stm32l4xx_hal.h"

#define BOOT_MAGIC 0xB007DA7A
#define RCM_PAYLOAD_ADDRESS 0x20020000
#define MAX_PAYLOADS 16
#define MAX_FILENAME_LENGTH 32

typedef struct {
  uint32_t magic;
  void( * entry)(void);
}
boot_header_t;

void boot_payload(const char * filename) {
  __disable_irq();

  // Disable the watchdog timer
  HAL_IWDG_Deinit( & hiwdg);

  // Load the payload into memory
  f_mount( & fatfs, "", 0);
  FIL file;
  if (f_open( & file, filename, FA_READ) == FR_OK) {
    uint32_t bytes_read;
    f_read( & file, (void * ) RCM_PAYLOAD_ADDRESS, f_size( & file), & bytes_read);
    f_close( & file);
  } else {
    printf("Error: failed to open %s\r\n", filename);
    return;
  }

  // Check the payload header
  boot_header_t * header = (boot_header_t * ) RCM_PAYLOAD_ADDRESS;
  if (header -> magic != BOOT_MAGIC) {
    printf("Error: invalid payload header\r\n");
    return;
  }

  // Jump to the payload
  header -> entry();
}

void show_payloads(void) {
    DIR dir;
    if (f_opendir( & dir, "") != FR_OK) {
      printf("Error: failed to open directory\r\n");
      return;
    }

    char filename[MAX_FILENAME_LENGTH];
    FILINFO info;
    int i;
    for (i = 1; i <= MAX_PAYLOADS; i++) {
      if (f_readdir( & dir, & info) != FR_OK) {
        printf("Error: failed to read directory\r\n");
        f_closedir( & dir);
        return;
      }
      if (info.fname[0] == 0) {
        break;
      }
      if (info.fattrib & AM_DIR) {
        continue;
      }
      strncpy(filename, info.fname, MAX_FILENAME_LENGTH);
      printf("%d. %s\r\n", i, filename);
    }

    f_closedir( & dir);

    if (i == 1) {
      printf("No payloads found\r\n");
      return;
    }

    printf("Enter the number of the payload to boot: ");
    int choice;
    scanf("%d", & choice);
    if (choice < 1 || choice >= i) {
      printf("Error: invalid choice\r\n");
      return;
    }

    if (f_lseekdir( & dir, (choice - 1) * sizeof(FILINFO)) != FR_OK) {
      printf("Error: failed to seek directory\r\n");
      f_closedir( & dir);
      return;
    }
    if (f_readdir( & dir, & info) != FR_OK) {
      printf("Error: failed to read directory\r\n");
      f_closedir( & dir);
      return;
    }
    strncpy(filename, info.fname, MAX_FILENAME_LENGTH);
    printf("Booting %s...\r\n", filename);
    boot_payload(filename);
